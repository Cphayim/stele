/**
 * 请问变量 a 会被 GC 回收吗？为什么？
 */
function test() {
  var a = 'yideng';
  return function() {
    // eval('');
    // new Function('return a');
    // with
  };
}
test()();
// 我的答案
// 不太清楚，可能会被回收
// test 函数运行时产生了一个函数作用域，在这个作用域中定义了变量 a 和一个匿名函数
// 这个匿名函数被 return 返回到了外部并调用，该匿名函数保留了访问外部词法作用域（test 执行时产生的函数作用域）的权限
// 但是匿名函数被返回后立即调用了，后续不再有别的变量指向它

// 讲解
// LexicakEnvironment 词法作用域
// 代码被绑定到全局词法作用域上
// 闭包能保护变量，也可以将变量的引用暴露出去

// 1. eval 在执行时不对全局词法作用域任何变量进行解除绑定，保留所有的，不会回收
// 在某作用域中使用eval(),则不会对该作用域可访问的任何变量进行解除绑定的操作，保留所有变量的绑定，以避免不可预期的结果
// 2. new Function() 创建的所有的函数的 Scope -> LexicakEnvironment，会回收
// 3. with 引擎一旦遇到 with，放弃其内使用的所有变量回收
// 4.
